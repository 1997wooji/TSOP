package com.tsop.dao;
import java.sql.Connection;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.tsop.db.ConnectDB;
//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : FolderDAO.java
//  @ Date : 2018-07-17
//  @ Author : 
//
//
import com.tsop.vo.FolderVO;




public class FolderDAO {
	
	public int addFolder(String folderName, String memberId, int superFolderId) {
	
		int folderId=generateId();
		
		if(folderId==-1)
			return -1;
		
		Connection conn = 	null;
		PreparedStatement pstmt = null;
		
		try {
			conn = ConnectDB.connect();
			
			pstmt=conn.prepareStatement("insert into folder_tb (folder_id, folder_name, super_folder_id, member_id) values (?,?,?,?)");
			pstmt.setInt(1, folderId);
			pstmt.setString(2, folderName);
			pstmt.setInt(3, superFolderId);
			pstmt.setString(4, memberId);
			pstmt.executeUpdate();

			
		} catch (SQLException e) {
			e.printStackTrace();
			return -1;
		}finally{
			ConnectDB.close(conn,pstmt);
		}
		
		//sql�� null�� ��� 0 return;
		
		
		return folderId;
		
		
	}
	
	/**�Ⱦ� �ָ������?*/
	public int addFolder(int folderId, String folderName, String memberId, String folderPath) {
		return -1;
	}
	
	private int generateId() {

		Connection conn = 	null;
		PreparedStatement pstmt = null;
		ResultSet rs=null;
		
		int maxId=0;
		
		try {
			conn = ConnectDB.connect();
			pstmt = conn.prepareStatement("select max(folder_id) as max_id from folder_tb");
			rs=pstmt.executeQuery();
			if(rs.next()){
				maxId=rs.getInt("max_id");
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
			return -1;
		}finally{
			ConnectDB.close(conn,pstmt,rs);
		}
		
		//sql�� null�� ��� 0 return;
		
		return maxId+1;
	
	}
	
	public int updateFolder(int folderId, String folderName, int superFolderId) {
		
		Connection conn = 	null;
		PreparedStatement pstmt = null;
		
		try {
			conn = ConnectDB.connect();
			
			pstmt=conn.prepareStatement("update folder_tb set folder_name=?, super_folder_id=? where folder_id=?");
			pstmt.setString(1, folderName);
			pstmt.setInt(2, superFolderId);
			pstmt.setInt(3, folderId);
			pstmt.executeUpdate();

			
		} catch (SQLException e) {
			e.printStackTrace();
			return -1;
		}finally{
			ConnectDB.close(conn,pstmt);
		}
		
		//sql�� null�� ��� 0 return;
		
		
		return folderId;
		
		
	}
	
	/**parameter�� ���� folderName���� update*/
	public int updateFolderName(int folderId, String folderName) {
		
		Connection conn = 	null;
		PreparedStatement pstmt = null;
		
		try {
			conn = ConnectDB.connect();
			
			pstmt=conn.prepareStatement("update folder_tb set folder_name=? where folder_id=?");
			pstmt.setString(1, folderName);
			pstmt.setInt(2, folderId);
			pstmt.executeUpdate();

			
		} catch (SQLException e) {
			e.printStackTrace();
			return -1;
		}finally{
			ConnectDB.close(conn,pstmt);
		}
		
		//sql�� null�� ��� 0 return;
		
		
		return folderId;
		
		
	}
	
	/**parameter�� ���� superFolderId�� update*/
	public int updateFolderPath(int folderId, int superFolderId) {
		
		Connection conn = 	null;
		PreparedStatement pstmt = null;
		
		try {
			conn = ConnectDB.connect();
			
			pstmt=conn.prepareStatement("update folder_tb set super_folder_id=? where folder_id=?");
			pstmt.setInt(1, superFolderId);
			pstmt.setInt(2, folderId);
			pstmt.executeUpdate();

			
		} catch (SQLException e) {
			e.printStackTrace();
			return -1;
		}finally{
			ConnectDB.close(conn,pstmt);
		}
		
		//sql�� null�� ��� 0 return;
		
		
		return folderId;
		
		
	}
	
	public int deleteFolder(int folderId) {
		
		Connection conn = 	null;
		PreparedStatement pstmt = null;
		
		try {
			conn = ConnectDB.connect();
			
			pstmt=conn.prepareStatement("delete from folder_tb where folder_id=?");;
			pstmt.setInt(1, folderId);
			pstmt.executeUpdate();

			
		} catch (SQLException e) {
			e.printStackTrace();
			return -1;
		}finally{
			ConnectDB.close(conn,pstmt);
		}
		
		//sql�� null�� ��� 0 return;
		
		
		return folderId;
		
	
	}
	
	/**�ش� ����� folder�� ����� folder id�� ��ȯ*/
	public int[] deleteFolder(String memberId) {
		
		Connection conn = 	null;
		PreparedStatement pstmt = null;
		ResultSet rs=null;
		int[] idList=null;
		
		try {
			conn = ConnectDB.connect();
			
			pstmt=conn.prepareStatement("select count(*) as cnt from folder_tb where member_id=?");;
			pstmt.setString(1, memberId);
			rs=pstmt.executeQuery();
			rs.next();
			int cnt=rs.getInt("cnt");
			
			idList=new int[cnt];
			
			rs.close();
			pstmt.close();
			
			pstmt=conn.prepareStatement("select folder_id from folder_tb where member_id=?");
			pstmt.setString(1, memberId);
			rs=pstmt.executeQuery();
		
			int i=0;
			
			while(rs.next())
			{
				idList[i]=rs.getInt("folder_id");
				i++;
			}
								
			rs.close();
			pstmt.close();

			
			pstmt=conn.prepareStatement("delete from folder_tb where member_id=?");
			pstmt.setString(1, memberId);
			pstmt.executeUpdate();

			
		} catch (SQLException e) {
			e.printStackTrace();
			return null;
		}finally{
			ConnectDB.close(conn,pstmt);
		}
		

		return idList;
		
	}
	
	/**���ڷ� ���� superFolder�ȿ� �ִ� ��� ���� ����� ���̵� ��ȯ*/
	public int[] deleteFromSuperFolder(int superFolderId) {
		
		Connection conn = 	null;
		PreparedStatement pstmt = null;
		ResultSet rs=null;
		int[] idList=null;
		
		try {
			conn = ConnectDB.connect();
			
			pstmt=conn.prepareStatement("select count(*) as cnt from folder_tb where super_folder_id=?");;
			pstmt.setInt(1, superFolderId);
			rs=pstmt.executeQuery();
			rs.next();
			int cnt=rs.getInt("cnt");
			
			idList=new int[cnt];
			
			rs.close();
			pstmt.close();
			
			pstmt=conn.prepareStatement("select folder_id from folder_tb where super_folder_id=?");
			pstmt.setInt(1, superFolderId);
			rs=pstmt.executeQuery();
		
			int i=0;
			
			while(rs.next())
			{
				idList[i]=rs.getInt("folder_id");
				i++;
			}
								
			rs.close();
			pstmt.close();

			
			pstmt=conn.prepareStatement("delete from folder_tb where super_folder_id=?");
			pstmt.setInt(1,superFolderId);
			pstmt.executeUpdate();

			
		} catch (SQLException e) {
			e.printStackTrace();
			return null;
		}finally{
			ConnectDB.close(conn,pstmt);
		}
		

		return idList;
		
	}
	
	public FolderVO searchFolder(int folderId) {

		Connection conn = 	null;
		PreparedStatement pstmt = null;
		ResultSet rs=null;
		
		FolderVO vo=null;
		
		try {
			conn = ConnectDB.connect();
			
			pstmt=conn.prepareStatement("select * from folder_tb where folder_id=?");;
			pstmt.setInt(1, folderId);
			rs=pstmt.executeQuery();
			rs.next();
			vo=new FolderVO(rs.getInt("folder_id"),rs.getString("folder_name"),rs.getInt("super_folder_id"),rs.getString("member_id"));
			
		} catch (SQLException e) {
			e.printStackTrace();
			return null;
		}finally{
			ConnectDB.close(conn,pstmt,rs);
		}
		
		//sql�� null�� ��� 0 return;
		
		
		return vo;

	}
	
	public Object[] searchFolder(String memberId) {

		Connection conn = 	null;
		PreparedStatement pstmt = null;
		ResultSet rs=null;
		
		List<FolderVO> list=new ArrayList<FolderVO>();

		try {
			conn = ConnectDB.connect();
			
			pstmt=conn.prepareStatement("select * from folder_tb where member_id=?");;
			pstmt.setString(1, memberId);
			rs=pstmt.executeQuery();
			
			while(rs.next()){
				list.add(new FolderVO(rs.getInt("folder_id"),rs.getString("folder_name"),rs.getInt("super_folder_id"),rs.getString("member_id")));
			}
		
		} catch (SQLException e) {
			e.printStackTrace();
			return null;
		}finally{
			ConnectDB.close(conn,pstmt,rs);
		}

		return list.toArray();

		
	}
	
	/**�� path �ȿ� �ִ� (1 depth)��� ���� ��ȯ*/
	public Object[] searchFolderPath(int superFolderId,int flag) {

		Connection conn = 	null;
		PreparedStatement pstmt = null;
		ResultSet rs=null;
		
		List<FolderVO> list=new ArrayList<FolderVO>();

		try {
			conn = ConnectDB.connect();
			
			pstmt=conn.prepareStatement("select * from folder_tb where super_folder_id=?");;
			pstmt.setInt(1, superFolderId);
			rs=pstmt.executeQuery();
			
			while(rs.next()){
				list.add(new FolderVO(rs.getInt("folder_id"),rs.getString("folder_name"),rs.getInt("super_folder_id"),rs.getString("member_id")));
			}
		
		} catch (SQLException e) {
			e.printStackTrace();
			return null;
		}finally{
			ConnectDB.close(conn,pstmt,rs);
		}

		return list.toArray();

		
	
	}
	
	/**key�� ���Ե� ������ ����  Folder��*/
	public Object[] searchFolderName(String keyName) {

		Connection conn = 	null;
		PreparedStatement pstmt = null;
		ResultSet rs=null;
		
		List<FolderVO> list=new ArrayList<FolderVO>();

		try {
			conn = ConnectDB.connect();
			
			pstmt=conn.prepareStatement("select * from folder_tb");;
			rs=pstmt.executeQuery();
			
			while(rs.next()){
				
				if(rs.getString("folder_name").contains(keyName))
					list.add(new FolderVO(rs.getInt("folder_id"),rs.getString("folder_name"),rs.getInt("super_folder_id"),rs.getString("member_id")));
			
			}
		
		} catch (SQLException e) {
			e.printStackTrace();
			return null;
		}finally{
			ConnectDB.close(conn,pstmt,rs);
		}

		return list.toArray();

		
	}
}
