package com.tsop.dao;
//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : PlaylistDAO.java
//  @ Date : 2018-07-16
//  @ Author : 
//
//

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.tsop.db.ConnectDB;

public class PlaylistDAO {
	
	public int addPlaylist(String playlistTitle, String imagePath, String[] tags, String playlistIntro, boolean visibility, String memberId, String playlistPath) {

		Connection conn = 	null;
		PreparedStatement pstmt = null;
		
		int playlistId=generateId();
		ImageDAO imageDAO=new ImageDAO();
		int imageId=imageDAO.addImage(imagePath);
		
		try {
			conn = ConnectDB.connect();
		
			pstmt = conn.prepareStatement("insert into playlist_tb (playlist_id, playlist_title, playlist_intro, playlist_date,member_id,image_id) values (?,?,?,sysdate,?,?)");
			pstmt.setInt(1, playlistId);
			pstmt.setString(2, playlistTitle);
			pstmt.setString(3, playlistIntro);
			pstmt.setString(4, memberId);
			pstmt.setInt(5, imageId);
			pstmt.executeUpdate();
			
		} catch (SQLException e) {
			e.printStackTrace();
			return -1;
		}finally{
			ConnectDB.close(conn,pstmt);
		}
		
		//sql�� null�� ��� 0 return;
		
		this.addPlaylistConfig(playlistId, visibility);
		this.addPlaylistPath(playlistId, playlistPath);
		
		for(String tagName : tags)
		{
			this.addPlaylistTag(playlistId, tagName);
		}
		
		return playlistId;
		
	}
	
	private int generateId() {
		
		Connection conn = 	null;
		PreparedStatement pstmt = null;
		ResultSet rs=null;
		
		int maxId=0;
		
		try {
			conn = ConnectDB.connect();
			pstmt = conn.prepareStatement("select max(playlist_id) as max_id from playlist_tb");
			rs=pstmt.executeQuery();
			rs.next();
			maxId=rs.getInt("max_id");
			
		} catch (SQLException e) {
			e.printStackTrace();
			return -1;
		}finally{
			ConnectDB.close(conn,pstmt,rs);
		}
		
		//sql�� null�� ��� 0 return;
		
		return maxId+1;
		
	}
	
	public int addPlaylistConfig(int playlistId, boolean visibility) {
		
		Connection conn = 	null;
		PreparedStatement pstmt = null;
		
		try {
			conn = ConnectDB.connect();
			
			pstmt=conn.prepareStatement("insert into playlist_config_tb (playlist_id, playlist_visibility) values (?,?)");
			pstmt.setInt(1, playlistId);
			if(visibility==false)
				pstmt.setString(2, "0");
			else
				pstmt.setString(2, "1");
			
			pstmt.executeUpdate();

			
		} catch (SQLException e) {
			e.printStackTrace();
			return -1;
		}finally{
			ConnectDB.close(conn,pstmt);
		}
		
		//sql�� null�� ��� 0 return;
		
		
		return playlistId;
		
	}
	
	public int addPlaylistPath(int playlistId, String playlistPath) {
		
		Connection conn = 	null;
		PreparedStatement pstmt = null;
		
		if(playlistPath==null||playlistId<1)
			return -1;
		
		try {
			conn = ConnectDB.connect();
			

			pstmt=conn.prepareStatement("insert into playlist_path_tb (playlist_id, playlist_path) values (?,?)");
			pstmt.setInt(1, playlistId);
			pstmt.setString(2, playlistPath);
			
			pstmt.executeUpdate();

			
		} catch (SQLException e) {
			e.printStackTrace();
			return -1;
		}finally{
			ConnectDB.close(conn,pstmt);
		}
		
		//sql�� null�� ��� 0 return;
		
		
		return playlistId;
		
	}
	
	public int addPlaylistTag(int playlistId, String tagName) {
		
		
		Connection conn = 	null;
		PreparedStatement pstmt = null;
		
		if(tagName==null||playlistId<1)
			return -1;
		
		try {
			conn = ConnectDB.connect();
			pstmt=conn.prepareStatement("insert into tag_playlist_tb (playlist_id, tag_name) values (?,?)");
			pstmt.setInt(1, playlistId);
			pstmt.setString(2, tagName);
			
			pstmt.executeUpdate();

			
		} catch (SQLException e) {
			e.printStackTrace();
			return -1;
		}finally{
			ConnectDB.close(conn,pstmt);
		}
		
		//sql�� null�� ��� 0 return;
		
		
		return playlistId;
	
	}
	
	public int updatePlaylist(int playlistId, String playlistTitle, String imagePath, String[] tags, String playlistIntro, boolean visibility) {
		

		Connection conn = 	null;
		PreparedStatement pstmt = null;
		
		try {
			conn = ConnectDB.connect();

			pstmt = conn.prepareStatement("update playlist_tb set playlist_title=?, playlist_intro=? where playlist_id=?");
			
			pstmt.setString(1, playlistTitle);
			pstmt.setString(2, playlistIntro);
			pstmt.setInt(3, playlistId);
			pstmt.executeUpdate();
			
		} catch (SQLException e) {
			e.printStackTrace();
			return -1;
		}finally{
			ConnectDB.close(conn,pstmt);
		}
		
		//sql�� null�� ��� 0 return;
		
		this.updateConfig(playlistId, visibility);
		this.updateImage(playlistId, imagePath);
		this.updateTag(playlistId, tags);
	
		//this.updatePath(playlistId, playlistPath);
		
		return playlistId;
		
		
	}
	
	public int updatePath(int playlistId, String playlistPath) {

		Connection conn = 	null;
		PreparedStatement pstmt = null;
		
		try {
			conn = ConnectDB.connect();
			pstmt=conn.prepareStatement("update playlist_path_tb set playlist_path=? where playlist_id=?");
			
			pstmt.setString(1, playlistPath);
			pstmt.setInt(2, playlistId);
			pstmt.executeUpdate();

			
		} catch (SQLException e) {
			e.printStackTrace();
			return -1;
		}finally{
			ConnectDB.close(conn,pstmt);
		}

		return playlistId;
		
		
		
	}
	
	public int updateConfig(int playlistId, boolean visibility) {
		
		Connection conn = 	null;
		PreparedStatement pstmt = null;
		
		try {
			conn = ConnectDB.connect();
			pstmt=conn.prepareStatement("update playlist_config_tb set playlist_visibility=? where playlist_id=?");
			
			if(visibility==false)
				pstmt.setString(1, "0");
			else
				pstmt.setString(1, "1");
			
			pstmt.setInt(2, playlistId);
			pstmt.executeUpdate();

			
		} catch (SQLException e) {
			e.printStackTrace();
			return -1;
		}finally{
			ConnectDB.close(conn,pstmt);
		}

		return playlistId;
		
		
	}
	
	public int updateTag(int playlistId, String[] tags) {
		/*��� delete �� add*/
		Connection conn = 	null;
		PreparedStatement pstmt = null;
		
		try {
			conn = ConnectDB.connect();
			pstmt=conn.prepareStatement("delete from tag_playlist_tb where playlist_id=?");
			
			pstmt.setInt(1, playlistId);
			pstmt.executeUpdate();			

			
		} catch (SQLException e) {
			e.printStackTrace();
			return -1;
		}finally{
			ConnectDB.close(conn,pstmt);
		}
		
		for(String tagName : tags)
		{
			addPlaylistTag(playlistId, tagName);
		}
		
		
		return playlistId;

	}
	
	public int updateImage(int playlistId, String imagePath) {

		ImageDAO imageDao=new ImageDAO();
		
		/*��� delete �� add*/
		Connection conn = 	null;
		PreparedStatement pstmt = null;
		ResultSet rs=null;
		
		int imageId=0;
		
		try {
			conn = ConnectDB.connect();
			pstmt=conn.prepareStatement("select image_id from playlist_tb where playlist_id=?");
			pstmt.setInt(1, playlistId);
			rs=pstmt.executeQuery();
			rs.next();
			imageId=rs.getInt("image_id");
			
		}catch (SQLException e) {
			e.printStackTrace();
			return -1;
			
		}finally{
			ConnectDB.close(conn,pstmt,rs);
		}
		

		imageDao.updateImage(imageId,imagePath);
			
		return playlistId;

	}
	
	
	public int[] deletePlaylist(String memberId) {
		

		Connection conn = 	null;
		PreparedStatement pstmt = null;
		ResultSet rs=null;
		
		try {
			conn = ConnectDB.connect();
			pstmt=conn.prepareStatement("select count(*) as cnt from playlist_tb where member_id=? group by(member_id)");
			
			pstmt.setString(1,memberId);
			rs=pstmt.executeQuery();
			rs.next();
			int column=rs.getInt("cnt");
			int[] idList=new int[column];
			
			pstmt.close();
			rs.close();
			
			pstmt=conn.prepareStatement("select playlist_id from playlist_tb where member_id=?");
			pstmt.setString(1, memberId);
			rs=pstmt.executeQuery();
			
			int i=0;
			
			while(rs.next())
			{
				idList[i]=rs.getInt("playlist_id");
				i++;
			}
			
			pstmt.close();
			pstmt=conn.prepareStatement("delete from playlist_tb where member_id=?");
			pstmt.setString(1, memberId);
			pstmt.executeUpdate();
			
			return idList;
			
		} catch (SQLException e) {
			e.printStackTrace();
			return null;
			
		}finally{
			ConnectDB.close(conn,pstmt,rs);
		}


	}
	
	public int deletePlaylist(int playlistId) {
		

		Connection conn = 	null;
		PreparedStatement pstmt = null;
		
		try {
			conn = ConnectDB.connect();
			pstmt=conn.prepareStatement("delete from playlist_tb where playlist_id=?");
			
			pstmt.setInt(1,playlistId);
			pstmt.executeUpdate();			

			
		} catch (SQLException e) {
			e.printStackTrace();
			return -1;
			
		}finally{
			ConnectDB.close(conn,pstmt);
		}

		return playlistId;

	
	}
	
	
	public int addPlaylistLike(int playlistId, String memberId){
		
		Connection conn = 	null;
		PreparedStatement pstmt = null;
		
		try {
			conn = ConnectDB.connect();
			pstmt=conn.prepareStatement("insert into like_playlist_tb (playlist_id, member_id) values (?,?)");
			
			pstmt.setInt(1,playlistId);
			pstmt.setString(2,memberId);
			pstmt.executeUpdate();			

			
		} catch (SQLException e) {
			e.printStackTrace();
			return -1;
			
		}finally{
			ConnectDB.close(conn,pstmt);
		}

		return playlistId;

	}
	
	public int deletePlaylistLike(int playlistId, String memberId){

		Connection conn = 	null;
		PreparedStatement pstmt = null;
		
		try {
			conn = ConnectDB.connect();
			pstmt=conn.prepareStatement("delete from like_playlist_tb where playlist_id=? and member_id=?");
			
			pstmt.setInt(1,playlistId);
			pstmt.setString(2,memberId);
			pstmt.executeUpdate();			

			
		} catch (SQLException e) {
			e.printStackTrace();
			return -1;
			
		}finally{
			ConnectDB.close(conn,pstmt);
		}

		return playlistId;

	}
	
	public int addPlaylistRepost(int playlistId, String memberId){

		Connection conn = 	null;
		PreparedStatement pstmt = null;
		
		try {
			conn = ConnectDB.connect();
			pstmt=conn.prepareStatement("insert into playlist_repost_tb (playlist_id, member_id) values (?,?)");
			
			pstmt.setInt(1,playlistId);
			pstmt.setString(2,memberId);
			pstmt.executeUpdate();			

			
		} catch (SQLException e) {
			e.printStackTrace();
			return -1;
			
		}finally{
			ConnectDB.close(conn,pstmt);
		}

		return playlistId;

	}
	
	public int deletePlaylistRepost(int playlistId, String memberId){
		

		Connection conn = 	null;
		PreparedStatement pstmt = null;
		
		try {
			conn = ConnectDB.connect();
			pstmt=conn.prepareStatement("delete from playlist_repost_tb where playlist_id=? and member_id=?");
			
			pstmt.setInt(1,playlistId);
			pstmt.setString(2,memberId);
			pstmt.executeUpdate();			

			
		} catch (SQLException e) {
			e.printStackTrace();
			return -1;
			
		}finally{
			ConnectDB.close(conn,pstmt);
		}

		return playlistId;

		
	}
	
	
}
