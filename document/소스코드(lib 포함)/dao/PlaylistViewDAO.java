package com.tsop.dao;

import java.sql.Connection;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.tsop.db.ConnectDB;
import com.tsop.vo.PlaylistVO;
import com.tsop.vo.SimplePlaylistVO;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : PlaylistViewDAO.java
//  @ Date : 2018-07-16
//  @ Author : 
//
//




public class PlaylistViewDAO {
	
/*	public static void main(String[] args)
	{
		PlaylistViewDAO dao=new PlaylistViewDAO();
		String[] strs={"tag1","tag2","tag3"};
		System.out.println(dao.addPlaylist("jiwootitle", "\\playlistimage\\12", strs, "��Ʈ�εེ���̼�~��", true, "jiwookkkk", "playlistjiwoopath"));
		
		
		
		String[] strs2={"tag4","tag5","tag6"};
		System.out.println(dao.updatePlaylist(31, "jiwootitle2","\\playlistimage\\32", strs2, "�񳻸���ȣ��~��~", false));
		
		System.out.println(dao.deletePlaylist(31));
		
		
		int[] list=dao.deletePlaylist("jiwookkkk");
		
		for(int r:list)
		{
			System.out.println(r);
		}
		
		PlaylistVO vo=dao.searchPlaylist(30);
		System.out.println(vo.toString());
		
		Object[] list=dao.searchPlaylist("fisher007");
		
		for(int i=0; i<list.length; i++)
		{
			PlaylistVO vo=(PlaylistVO)list[i];
			System.out.println(vo.toString());
		}
		
	Object[] list=dao.searchPlaylist("���", 1);
		
		for(int i=0; i<list.length; i++)
		{
			PlaylistVO vo=(PlaylistVO)list[i];
			System.out.println(vo.toString());
		}
		
		Object[] list=dao.searchRepostPlaylist("joonsung14");
		for(int i=0; i<list.length; i++)
		{
			PlaylistVO vo=(PlaylistVO)list[i];
			System.out.println(vo.toString());
		}
		
		Object[] list=dao.searchLikePlaylist("joonsung14");
		
		for(int i=0; i<list.length; i++)
		{
			SimplePlaylistVO vo=(SimplePlaylistVO)list[i];
			System.out.println(vo.toString());
		}�̰� like view���� ���ͼ� ����!!

		
		 
		Object[] list=dao.searchTopLikePlaylist();
		
		for(int i=0; i<list.length; i++)
		{
			PlaylistVO vo=(PlaylistVO)list[i];
			System.out.println(vo.toString());
		}
		
		
		System.out.println(dao.addPlaylistLike(15, "jiwookkkk"));
		
			System.out.println(dao.deletePlaylistLike(15, "jiwookkkk"));
		System.out.println(dao.addPlaylistRepost(15, "jiwookkkk"));
	
		System.out.println(dao.deletePlaylistRepost(15, "jiwookkkk"));

		
		
	}
*/
	public int addPlaylist(String playlistTitle, String imagePath, String[] tags, String playlistIntro, boolean visibility, String memberId, String playlistPath) {
		PlaylistDAO pl=new PlaylistDAO();
		return pl.addPlaylist(playlistTitle, imagePath, tags, playlistIntro, visibility, memberId, playlistPath);
	}
	
	public int updatePlaylist(int playlistId, String playlistTitle, String imagePath, String[] tags, String playlistIntro, boolean visibility) {
		PlaylistDAO pl=new PlaylistDAO();
		return pl.updatePlaylist(playlistId, playlistTitle, imagePath, tags, playlistIntro, visibility);
	}
	
	public int deletePlaylist(int playlistId) {
		PlaylistDAO pl=new PlaylistDAO();
		return pl.deletePlaylist(playlistId);
	}
	
	public int[] deletePlaylist(String memberId) {
		PlaylistDAO pl=new PlaylistDAO();
		return pl.deletePlaylist(memberId);
	}
	
	public PlaylistVO searchPlaylist(int playlistId) {
		
		Connection conn = 	null;
		PreparedStatement pstmt = null;
		ResultSet rs=null;
		
		PlaylistVO vo=null;
		boolean visibility=false;
		
		try {
			conn = ConnectDB.connect();
			pstmt=conn.prepareStatement("select * from playlist_info_view where playlist_id=?");
			pstmt.setInt(1, playlistId);
		
			rs=pstmt.executeQuery();
			rs.next();

			if(rs.getString("playlist_visibility").equals("1"))
				visibility=true;

			vo=new PlaylistVO(rs.getInt("playlist_id"),rs.getString("playlist_title"),rs.getString("member_id"),rs.getString("member_nickname"),rs.getString("playlist_intro"),rs.getDate("playlist_date").toString(),rs.getString("tag_name"),rs.getString("image_path"),rs.getInt("like_cnt"),rs.getInt("repost_cnt"),visibility);				

		} catch (SQLException e) {
			e.printStackTrace();
			return null;
		}finally{
			ConnectDB.close(conn,pstmt,rs);
		}
		
		return vo;
		
	}
	
	public Object[] searchPlaylist(String memberId) {
		
		Connection conn = 	null;
		PreparedStatement pstmt = null;
		ResultSet rs=null;
		
		List<PlaylistVO> list=new ArrayList<PlaylistVO>();
		
		try {
			conn = ConnectDB.connect();
			pstmt=conn.prepareStatement("select * from playlist_info_view where member_id=?");
			pstmt.setString(1, memberId);
			rs=pstmt.executeQuery();

			while(rs.next()){
			
				boolean visibility=false;
				
				if(rs.getString("playlist_visibility").equals("1"))
					visibility=true;

				
				PlaylistVO vo=new PlaylistVO(rs.getInt("playlist_id"),rs.getString("playlist_title"),rs.getString("member_id"),rs.getString("member_nickname"),rs.getString("playlist_intro"),rs.getDate("playlist_date").toString(),rs.getString("tag_name"),rs.getString("image_path"),rs.getInt("like_cnt"),rs.getInt("repost_cnt"),visibility);				
				list.add(vo);
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
			return null;
		}finally{
			ConnectDB.close(conn,pstmt,rs);
		}
		
		return list.toArray();
	
	}
	
	public Object[] searchPlaylist(String key, int flag) {

		Connection conn = 	null;
		PreparedStatement pstmt = null;
		ResultSet rs=null;
		
		List<PlaylistVO> list=new ArrayList<PlaylistVO>();
		CharSequence cs=key+"";
		
		try {
			conn = ConnectDB.connect();
			pstmt=conn.prepareStatement("select * from playlist_info_view");
			rs=pstmt.executeQuery();

			while(rs.next()){

	
				if(rs.getString("playlist_title").contains(cs)||rs.getString("member_nickname").contains(cs))
				{
					/*rs.getString("tag_name").contains(cs) tag�� null ���� ���� ����*/
					//�����ϰ� ������ ����!
				
					boolean visibility=false;
					
					if(rs.getString("playlist_visibility").equals("1"))
						visibility=true;
					

					PlaylistVO vo=new PlaylistVO(rs.getInt("playlist_id"),rs.getString("playlist_title"),rs.getString("member_id"),rs.getString("member_nickname"),rs.getString("playlist_intro"),rs.getDate("playlist_date").toString(),rs.getString("tag_name"),rs.getString("image_path"),rs.getInt("like_cnt"),rs.getInt("repost_cnt"),visibility);				
					list.add(vo);
				}
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
			return null;
		}finally{
			ConnectDB.close(conn,pstmt,rs);
		}
		
		return list.toArray();
	
	
	}
	
	public Object[] searchRepostPlaylist(String memberId) {
		
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs=null;
		
		List<Integer> idList=new ArrayList<Integer>();
		List<PlaylistVO> list=new ArrayList<PlaylistVO>();
		
		try {
			conn = ConnectDB.connect();
			pstmt=conn.prepareStatement("select playlist_id from playlist_repost_tb where member_id=?");
			pstmt.setString(1, memberId);
			rs=pstmt.executeQuery();
			
			while(rs.next())
			{
				int playlistId=rs.getInt("playlist_id");
				idList.add(playlistId);
			}
			
			rs.close();
			pstmt.close();
			
			for(int index : idList){
		
			pstmt=conn.prepareStatement("select * from playlist_info_view where playlist_id=?");
			pstmt.setInt(1, index);
			rs=pstmt.executeQuery();
			
			rs.next();
			
			boolean visibility=false;
			
			if(rs.getString("playlist_visibility").equals("1"))
				visibility=true;

			PlaylistVO vo=new PlaylistVO(rs.getInt("playlist_id"),rs.getString("playlist_title"),rs.getString("member_id"),rs.getString("member_nickname"),rs.getString("playlist_intro"),rs.getDate("playlist_date").toString(),rs.getString("tag_name"),rs.getString("image_path"),rs.getInt("like_cnt"),rs.getInt("repost_cnt"),visibility);				
			list.add(vo);
			
			}

			
		} catch (SQLException e) {
			e.printStackTrace();
			return null;
		}finally{
			ConnectDB.close(conn,pstmt,rs);
		}
		
		return list.toArray();
	
	}
	
	/*�� playlist�� repost�� member�� �����Ѵ�. */
	public Object[] searchRepostPlaylist(int playlistId) {
		return null;
	}
	
	public Object[] searchLikePlaylist(String memberId) {
		
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs=null;
		
		List<SimplePlaylistVO> list=new ArrayList<SimplePlaylistVO>();
		
		try {
			conn = ConnectDB.connect();
			pstmt=conn.prepareStatement("select * from like_playlists_view where member_id=?");
			pstmt.setString(1, memberId);
			rs=pstmt.executeQuery();
			
			while(rs.next())
			{
				SimplePlaylistVO vo=new SimplePlaylistVO(rs.getInt("playlist_id"),rs.getString("playlist_title"),rs.getString("member_id"),rs.getString("member_nickname"),rs.getString("image_path"));
				list.add(vo);
			}

			
		} catch (SQLException e) {
			e.printStackTrace();
			return null;
		}finally{
			ConnectDB.close(conn,pstmt,rs);
		}
		
		return list.toArray();
		
	}
	
	/*�� playlist�� ���ƿ��� member�� �����Ѵ�.*/
	public Object[] searchLikePlaylist(int playlistId) {
		return null;
	}
	
	/*like count ������ 10�� ����*/
	public Object[] searchTopLikePlaylist() {

		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs=null;
		
		List<PlaylistVO> list=new ArrayList<PlaylistVO>();
		
		try {
			conn = ConnectDB.connect();
			pstmt=conn.prepareStatement("select * from playlist_info_view order by like_cnt desc");
			rs=pstmt.executeQuery();
			
			for(int i=0; i<10; i++)
			{
				if(rs.next()==false)
					break;
				
				boolean visibility=false;
				
				if(rs.getString("playlist_visibility").equals("1"))
					visibility=true;
				
				PlaylistVO vo=new PlaylistVO(rs.getInt("playlist_id"),rs.getString("playlist_title"),rs.getString("member_id"),rs.getString("member_nickname"),rs.getString("playlist_intro"),rs.getDate("playlist_date").toString(),rs.getString("tag_name"),rs.getString("image_path"),rs.getInt("like_cnt"),rs.getInt("repost_cnt"),visibility);				
				list.add(vo);
				
			}

			
		} catch (SQLException e) {
			e.printStackTrace();
			return null;
		}finally{
			ConnectDB.close(conn,pstmt,rs);
		}
		
		return list.toArray();
		
	}
	
	public Object[] searchTopRepostPlaylist() {
		

		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs=null;
		
		List<PlaylistVO> list=new ArrayList<PlaylistVO>();
		
		try {
			conn = ConnectDB.connect();
			pstmt=conn.prepareStatement("select * from playlist_info_view order by repost_cnt desc");
			rs=pstmt.executeQuery();
			
			for(int i=0; i<10; i++)
			{
				if(rs.next()==false)
					break;
				
				boolean visibility=false;
				
				if(rs.getString("playlist_visibility").equals("1"))
					visibility=true;
				
				PlaylistVO vo=new PlaylistVO(rs.getInt("playlist_id"),rs.getString("playlist_title"),rs.getString("member_id"),rs.getString("member_nickname"),rs.getString("playlist_intro"),rs.getDate("playlist_date").toString(),rs.getString("tag_name"),rs.getString("image_path"),rs.getInt("like_cnt"),rs.getInt("repost_cnt"),visibility);				
				list.add(vo);
				
			}

			
		} catch (SQLException e) {
			e.printStackTrace();
			return null;
		}finally{
			ConnectDB.close(conn,pstmt,rs);
		}
		
		return list.toArray();
		
	
	}
	
	public int addPlaylistLike(int playlistId, String memberId){
		PlaylistDAO pl=new PlaylistDAO();
		return pl.addPlaylistLike(playlistId,memberId);
		
	}
	
	public int deletePlaylistLike(int playlistId, String memberId){
		PlaylistDAO pl=new PlaylistDAO();
		return pl.deletePlaylistLike(playlistId,memberId);
	}
	
	public int addPlaylistRepost(int playlistId, String memberId){
		PlaylistDAO pl=new PlaylistDAO();
		return pl.addPlaylistRepost(playlistId,memberId);
	}
	
	public int deletePlaylistRepost(int playlistId, String memberId){
		PlaylistDAO pl=new PlaylistDAO();
		return pl.deletePlaylistRepost(playlistId,memberId);
	}
	
	
	public boolean load() {
		return false;
	}
	
	public boolean load(String key, int flag) {
		return false;
	}
	
	private PlaylistVO add(PlaylistVO obj) {
		return null;
	}
	
	private PlaylistVO update(PlaylistVO obj) {
		return null;
	}
	
	private PlaylistVO delete(int playlistId) {
		return null;
	}
	
	public boolean save() {
		return false;
	}
}
